using UnityEngine;
using DP.DevTools;
using System.Collections.Generic;
#if UNITY_EDITOR
using UnityEditor;
using DP.ResourceManagement;
#endif


namespace DP.ScriptableEvents
{
    /// <summary>
    /// This scriptable object represents a game event that can be listened to by
    /// GameEventListenerForList components. When the event is raised, it invokes
    /// the OnEventRaised method on all registered listeners.
    /// </summary>
    [CreateAssetMenu(menuName = "Scriptable Event System/Game Event For List")]
    internal class GameEventForList : ScriptableObject
    {
        #region Private Variables
        [SerializeField, Tooltip("The list of registered listeners for this game event.")]
        List<GameEventListenerForList> listeners = new List<GameEventListenerForList>();
        #endregion
        #region Public Methods

        /// <summary>
        /// Registers a new listener for this game event.
        /// </summary>
        /// <param name="newListener">The new listener to register.</param>
        internal void RegisterListener(GameEventListenerForList newListener)
        {
            listeners.Add(newListener);
        }

        /// <summary>
        /// Unregisters a specified listener from this game event.
        /// </summary>
        /// <param name="listenerToRemove">The listener to unregister.</param>
        internal void UnregisterListener(GameEventListenerForList listenerToRemove)
        {
            listeners.Remove(listenerToRemove);
        }

        /// <summary>
        /// Raises this game event, causing all registered listeners to invoke their OnEventRaised method.
        /// </summary>
        public void RaiseEvent()
        {
            // Invoke OnEventRaised on all registered listeners, starting from the end of the list in case
            // any listeners are removed during the invocation.
            for (int i = listeners.Count - 1; i >= 0 ; i--)
            {
                listeners[i].OnEventRaised();
            }
        }
        #endregion
    }

    
}
