using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif
using UnityEngine.UI;
using DP.Controllers;

namespace DP.UI
{
    /// <summary>
    /// This class provides the functionality for a dynamic crosshair that changes its size and visibility in response to certain actions performed by the player.
    /// </summary>
    public class DynamicCrosshairs : MonoBehaviour
    {
        public static DynamicCrosshairs Instance;

        [SerializeField, Tooltip("The WeaponController component that provides values for the crosshair's size and visibility.")]
        internal WeaponController weaponController;
        internal float restingSize;
        internal float maxSize;
        internal float currentSize;
        internal float reactionSpeed;
        RectTransform reticleTransform; // The RectTransform of the reticle UI element.
        Image[] crosshairsParts;
        int crosshairsPartsCount;
        Color crosshairsVisibleColor, crosshairsNotVisibleColor, currentColor;
        private bool playerMoving;

        private void Awake()
        {
        }

        /// <summary>
        /// Sets the playerMoving flag to true, indicating that the player is currently moving.
        /// </summary>
        public void PlayerMovingTrue() { playerMoving = true; }

        /// <summary>
        /// Sets the playerMoving flag to false, indicating that the player is not currently moving.
        /// </summary>
        public void PlayerMovingFalse() { playerMoving = false; }

        private void Start()
        {
            reticleTransform = GetComponent<RectTransform>();
            crosshairsParts = reticleTransform.GetComponentsInChildren<Image>();
            crosshairsPartsCount = crosshairsParts.Length;
            crosshairsVisibleColor = crosshairsParts[1].color;
            crosshairsNotVisibleColor = crosshairsVisibleColor;
            crosshairsNotVisibleColor.a = 0;
            GetCrosshairsValues();
        }

        private void Update()
        {
            currentColor = crosshairsParts[3].color;
            if (playerMoving || weaponController.isShooting && !weaponController.isReloading && weaponController.bulletsLeftInMag > 0)
                ExpandCrosshairs();
            else
                CompressCrosshairs();


            if (weaponController.isAiming)
            {
                for (int i = 0; i < crosshairsPartsCount; i++)
                {
                    if (crosshairsParts[i].color != crosshairsNotVisibleColor)
                        crosshairsParts[i].color = Color.Lerp(currentColor, crosshairsNotVisibleColor, 25 * Time.fixedDeltaTime);
                }
            }
            if (!weaponController.isAiming)
            {
                for (int i = 0; i < crosshairsPartsCount; i++)
                {
                    if (crosshairsParts[i].color != crosshairsVisibleColor)
                        crosshairsParts[i].color = Color.Lerp(currentColor, crosshairsVisibleColor, 10 * Time.fixedDeltaTime);
                }
            }
