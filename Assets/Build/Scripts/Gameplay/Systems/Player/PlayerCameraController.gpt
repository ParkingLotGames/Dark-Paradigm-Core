using System;
using UnityEngine;
using DP.StaticDataContainers;
using ControlFreak2;

namespace DP.Controllers
{
    /// <summary>
    /// This class contains the behavior for a player camera in Unity.
    /// </summary>
    public class PlayerCameraController : MonoBehaviour
    {
        /// <summary>
        /// The singleton instance of the <see cref="PlayerCameraController"/> class.
        /// </summary>
        internal static PlayerCameraController Instance;

        /// <summary>
        /// The player model that the camera should follow.
        /// </summary>
        [SerializeField]
        [Tooltip("The player model that the camera should follow.")]
        Transform TPSPlayerModel;

        /// <summary>
        /// The speed at which the camera should rotate on Android devices.
        /// </summary>
        [SerializeField]
        [Range(1, 10)]
        [Tooltip("The speed at which the camera should rotate on Android devices.")]
        float androidLookSpeed = 5.0f;

        /// <summary>
        /// The speed at which the camera should rotate on Vita devices.
        /// </summary>
        [SerializeField]
        [Range(1, 10)]
        [Tooltip("The speed at which the camera should rotate on Vita devices.")]
        float vitaLookSpeed = 5f;

        /// <summary>
        /// The speed at which the camera should rotate on PS4 devices.
        /// </summary>
        [SerializeField]
        [Range(1, 10)]
        [Tooltip("The speed at which the camera should rotate on PS4 devices.")]
        float PS4LookSpeed = 5f;

        /// <summary>
        /// The speed at which the camera should rotate on standalone devices.
        /// </summary>
        [SerializeField]
        [Range(1, 10)]
        [Tooltip("The speed at which the camera should rotate on standalone devices.")]
        float standaloneLookSpeed = 5f;

        /// <summary>
        /// The maximum angle (in degrees) that the camera can be rotated on the vertical axis.
        /// </summary>
        [SerializeField]
        [Range(0, 180)]
        [Tooltip("The maximum angle (in degrees) that the camera can be rotated on the vertical axis.")]
        float lookXLimit = 60.0f;

        /// <summary>
        /// The <see cref="Camera"/> component attached to the player.
        /// </summary>
        internal Camera playerCamera;

        /// <summary>
        /// Whether the vertical rotation of the camera should be inverted.
        /// </summary>
        [SerializeField]
        [Tooltip("Whether the vertical rotation of the camera should be inverted.")]
        internal bool inverseY;

        /// <summary>
        /// The current vertical rotation of the camera.
        /// </summary>
        float verticalRotation = 0;

        /// <summary>
        /// Whether the camera should be able to rotate based on user input.
        /// </summary>
        internal bool isLookRotationEnabled = true;

        private void Awake()
        {
            // Initialize the singleton instance
            Singleton();

            // Get the camera component attached to the player
            playerCamera = GetComponentInChildren<Camera>();

#if UNITY_STANDALONE
            // Lock the cursor and hide it when running on a standalone device
            Cursor.lockState = CursorLockMode.Locked;
            Cursor.visible = false;
#endif
        }

        /// <summary>
        /// Enables the camera to rotate based on user input.
        /// </summary>
        public void EnableCameraMovement() { isLookRotationEnabled = true; }

        /// <summary>
        /// Disables the camera from rotating based on user input.
        /// </summary>
        public void DisableCameraMovement() { isLookRotationEnabled = false; }

        /// <summary>
        /// Initializes the singleton instance of the <see cref="PlayerCameraController"/> class.
        /// </summary>
        void Singleton()
        {
            if (Instance == null)
            {
                Instance = this;
            }
            else
                Destroy(gameObject);
        }

        private void Update()
        {
            // Allow the camera to rotate based on user input
            AllowRotation();

            // Rotate the camera based on user input
            RotateCameraAndPlayer();
        }

        /// <summary>
        /// Determines whether the camera should be able to rotate based on the current game state.
        /// </summary>
        private void AllowRotation()
        {
            ////
            //            canLookAround = Management.GameManager.Instance.gameState == Management.GameState.Playing;
        }

        /// <summary>
        /// Rotates the camera and player model based on user input.
        /// </summary>
        public void RotateCameraAndModel()
        {
            if (isLookRotationEnabled)
            {
                // Get the direction of the player movement
                Vector3 playerDirection = Vector3.right * Input.GetAxisRaw(PSVitaInputValues.RSHorizontal) + Vector3.forward * Input.GetAxisRaw(PSVitaInputValues.RSVertical);

                // If the player is moving, rotate the player model in the direction of the movement
                if (playerDirection.sqrMagnitude > 0.0f)
                    TPSPlayerModel.transform.localRotation = Quaternion.LookRotation(playerDirection, Vector3.up);
            }
        }

        /// <summary>
        /// Rotates the camera and player model based on user input.
        /// </summary>
        public void RotateCameraAndPlayer()
        {
            if (isLookRotationEnabled)
            {
                if (inverseY)
                {
                    // Get the vertical rotation of the camera on Android devices
                    #if UNITY_ANDROID
                        verticalRotation = CF2Input.GetAxis(PSVitaInputValues.RSVertical) * (androidLookSpeed * 10) * Time.fixedDeltaTime;
                    #endif

                    // Get the vertical rotation of the camera on Vita devices
                    #if UNITY_PSP2
                        verticalRotation = Input.GetAxis(PSVitaInputValues.RSVertical) * (vitaLookSpeed * 100) * Time.fixedDeltaTime;
                    #endif

                    // Get the vertical rotation of the camera on PS4 devices
                    #if UNITY_PS4
                        verticalRotation = Input.GetAxis(PS4InputValues.RSVertical1) * (PS4LookSpeed * 25) * Time.fixedDeltaTime;
                    #endif

                    // Get the vertical rotation of the camera on standalone devices
                    #if UNITY_STANDALONE || UNITY_EDITOR
                        verticalRotation = Input.GetAxis("Mouse Y") * (standaloneLookSpeed * 10) * Time.fixedDeltaTime;
                    #endif
                }
                else
                {
                    // Get the vertical rotation of the camera on Android devices
                    #if UNITY_ANDROID
                        verticalRotation -= CF2Input.GetAxis(PSVitaInputValues.RSVertical) * (androidLookSpeed * 10) * Time.fixedDeltaTime;
                    #endif

                    // Get the vertical rotation of the camera on Vita devices
                    #if UNITY_PSP2
                        verticalRotation -= Input.GetAxis(PSVitaInputValues.RSVertical) * (vitaLookSpeed * 100) * Time.fixedDeltaTime;
                    #endif

                    // Get the vertical rotation of the camera on PS4 devices
                    #if UNITY_PS4
                        verticalRotation -= Input.GetAxis(PS4InputValues.RSVertical1) * (PS4LookSpeed * 25) * Time.fixedDeltaTime;
                    #endif

                    // Get the vertical rotation of the camera on standalone devices
                    #if UNITY_STANDALONE || UNITY_EDITOR
                        verticalRotation -= Input.GetAxis("Mouse Y") * (standaloneLookSpeed * 10) * Time.fixedDeltaTime;
                    #endif
                }

                // Clamp the vertical rotation to the specified limit
                verticalRotation = Mathf.Clamp(verticalRotation, -lookXLimit, lookXLimit);

                // Apply the vertical rotation to the camera
                playerCamera.transform.localRotation = Quaternion.Euler(verticalRotation, 0, 0);

                // Rotate the player model based on the horizontal rotation of the camera
                TPSPlayerModel.Rotate(0, Input.GetAxis("Mouse X") * standaloneLookSpeed, 0);
            }
        }
    }
}
