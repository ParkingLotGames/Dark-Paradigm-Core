using UnityEngine;
using DP.DevTools;
using UnityEngine.Events;
using System.Collections.Generic;
#if UNITY_EDITOR
using UnityEditor;
using DP.ResourceManagement;
#endif


namespace DP.ScriptableEvents
{
    /// <summary>
    /// This class listens to a specified game event and invokes a UnityEvent in response to that game event being raised.
    /// It is designed to work with GameEventForList objects, which allow for multiple listeners to be registered.
    /// </summary>
    internal class GameEventListenerForList : MonoBehaviour
    {
        #region Private Variables
        [SerializeField, Tooltip("The game event for list that this listener will listen to.")]
        internal GameEventForList gameEvent;

        [SerializeField, Tooltip("The UnityEvent that will be invoked when the game event is raised.")]
        UnityEvent response;
        #endregion

        private void OnEnable()
        {
            // Register this listener to receive notifications when the game event is raised.
            gameEvent.RegisterListener(this);
        }
        private void OnDisable()
        {
            // Unregister this listener so it no longer receives notifications when the game event is raised.
            gameEvent.UnregisterListener(this);
        }

        internal void OnEventRaised()
        {
            // Invoke the response UnityEvent when the game event is raised.
            response.Invoke();
        }

    }

    
}
