using UnityEngine;
using DP.DevTools;
#if UNITY_EDITOR
using UnityEditor;
using DP.ResourceManagement;
#endif


namespace DP.ScriptableEvents
{
    /// <summary>
    /// This scriptable object represents a game event that can be listened to by
    /// GameEventListener components. When the event is raised, it invokes
    /// the OnEventRaised method on the registered listener.
    /// </summary>
    [CreateAssetMenu(menuName = "Scriptable Event System/Game Event")]
    internal class GameEvent : ScriptableObject
	{
        #region Private Variables
        [SerializeField, Tooltip("The registered listener for this game event.")]
        GameEventListener listener;
        #endregion
        #region Public Methods

        /// <summary>
        /// Registers a new listener for this game event.
        /// </summary>
        /// <param name="newListener">The new listener to register.</param>
        internal void RegisterListener(GameEventListener newListener)
        {
            listener = newListener;
        }

        /// <summary>
        /// Unregisters the current listener from this game event.
        /// </summary>
        internal void UnregisterListener()
        {
            listener = null;
        }

        /// <summary>
        /// Raises this game event, causing the registered listener to invoke its OnEventRaised method.
        /// </summary>
        public void RaiseEvent()
        {
            listener.OnEventRaised();
        }
        #endregion
    }


}
